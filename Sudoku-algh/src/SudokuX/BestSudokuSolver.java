package SudokuX;

public class BestSudokuSolver {

    public static boolean solveSudoku(int[][] board) {
        int N = board.length;

        // Найти пустую ячейку
        int[] emptyCell = findEmptyCell(board);
        int row = emptyCell[0];
        int col = emptyCell[1];

        // Если нет пустых ячеек, судоку решено
        if (row == -1 && col == -1) {
            return true;
        }

        // Попробовать заполнить ячейку от 1 до 9
        for (int num = 1; num <= 9; num++) {
            if (isValidMove(board, row, col, num)) {
                // Если число допустимо, установить его и рекурсивно решить оставшуюся часть
                board[row][col] = num;

                // Если рекурсивный вызов возвращает true, судоку решено
                if (solveSudoku(board)) {
                    return true;
                }

                // Если текущее распределение не приводит к правильному решению, вернуться и попробовать другое число
                board[row][col] = 0;
            }
        }

        // Если все числа от 1 до 9 не подходят, вернуться на предыдущий уровень рекурсии
        return false;
    }

    private static int[] findEmptyCell(int[][] board) {
        int[] result = {-1, -1};
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == 0) {
                    result[0] = i;
                    result[1] = j;
                    return result;
                }
            }
        }
        return result;
    }

    private static boolean isValidMove(int[][] board, int row, int col, int num) {
        // Проверить строку и столбец
    	//9
        for (int i = 0; i < 9; i++) {
            if (board[row][i] == num || board[i][col] == num) {
                return false;
            }
        }

        // Проверить квадрат 3x3
        int startRow = row - row % 3;
        int startCol = col - col % 3;
        //3
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[startRow + i][startCol + j] == num) {
                    return false;
                }
            }
        }

        return true;
    }

    public static void printBoard(int[][] board) {
    	int n = 0;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                System.out.print(board[i][j] + " ");
                if(board[i][j] != 0) {
                	n++;
                }
            }
            System.out.println();
        }
       System.out.println(n);
    }

    public static void main(String[] args) {
    	double start = System.nanoTime();
//        int[][] sudokuBoard = {
//        		{13, 16,  5,  9, 10,  2,  3, 12, 15,  7, 14,  4,  1,  8,  6, 11},
//                { 8, 11,  4,  6,  9, 13, 14, 15, 10, 12,  3,  1,  5, 16,  7,  2},
//                { 1, 15, 10,  3,  6,  7,  8, 11,  5, 16,  2, 13, 12, 14,  4, 9},
//                { 2, 12, 14,  7, 16,  4,  5,  1,  9,  8, 11,  6, 15,  3, 13, 10},
//                { 5,  2,  3,  8, 12, 14, 15,  6, 16,  9,  4, 11, 13, 10,  1, 7},
//                {11,  1, 16, 12,  2,  5,  7,  3, 13, 15, 10,  8, 14,  4,  9,  6},
//                {14, 13,  7, 10, 11, 16,  4,  9, 12,  6,  1,  3,  2, 15,  8,  5},
//                { 9,  6, 15,  4,  1, 10, 13,  8, 14,  5,  7,  2, 16, 11,  3, 12},
//                { 7,  9,  8, 13,  5,  3, 11, 14,  1, 10, 12, 15,  4,  6,  2, 16},
//                { 4, 14,  2,  1, 15,  6, 16, 13,  3, 11,  5,  9, 10,  7, 12,  8},
//                {10,  5,  6, 15,  8, 12,  9,  7,  2,  4, 13,  0,  0,  0,  0,  0},
//                {12,  3, 11, 16,  4,  1, 10,  2,  8,  14, 6,  7,  9, 13,  5, 15},
//                {15, 10,  1,  2,  7, 11, 12,  5,  4,  3,  8, 14,  6,  9, 16, 13},
//                { 6,  8, 12, 11, 14, 15,  1, 16,  7, 13,  9,  5,  3,  2, 10,  4},
//                { 3,  4,  9, 14,  0,  0,  0,  0,  0,  0,  0,  0,  7,  5, 15,  1},
//                { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 12, 11, 14}
//        };
    	int[][] sudokuBoard = {
        		{0, 0, 0, 0, 0, 0, 0, 1, 2},
                {0, 0, 0, 0, 3, 5, 0, 0, 0},
                {0, 0, 0, 6, 0, 0, 0, 7, 0},
                {7, 0, 0, 0, 0, 0, 3, 0, 0},
                {0, 0, 0, 4, 0, 0, 8, 0, 0},
                {1, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1, 2, 0, 0, 0, 0},
                {0, 8, 0, 0, 0, 0, 0, 4, 0},
                {0, 5, 0, 0, 0, 0, 6, 0, 0}
        };
    	
    	
    	
    	//17 - 0.77 - 
    	
//    	int[][] sudokuBoard = {
//        		{13, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 11},
//                { 8,  0,  4,  0,  9, 13,  0, 15, 10,  0,  3,  1,  0,  0,  0,  2},
//                { 1, 15, 10,  3,  6,  7,  8, 11,  5, 16,  2, 13, 12, 14,  0,  9},
//                { 0,  0, 14,  0, 16,  4,  0,  1,  9,  0, 11,  6,  0,  3,  0,  0},
//                { 0,  2,  0,  8,  0,  0,  0,  6, 16,  0,  0,  0, 13,  0,  1,  7},
//                { 0,  1, 16, 12,  0,  0,  7,  0,  0, 15,  0,  0, 14,  4,  9,  0},
//                { 0,  0,  0,  0,  0, 16,  4,  9, 12,  6,  1,  0,  0,  0,  0,  0},
//                { 0,  6,  0,  4,  1,  0, 13,  0,  0,  5,  0,  2, 16,  0,  3,  0},
//                { 0,  9,  0, 13,  5,  0, 11,  0,  0, 10,  0, 15,  4,  0,  2,  0},
//                { 0,  0,  0,  0,  0,  6, 16, 13,  3, 11,  5,  0,  0,  0,  0,  0},
//                { 0,  5,  6, 15,  0,  0,  9,  0,  0,  4,  0,  0, 11,  1, 14,  0},
//                {12,  3, 11, 16,  4,  1, 10,  2,  8, 14,  0,  7,  9, 13,  5, 15},
//                { 0,  0,  1,  0,  7, 11,  0,  5,  4,  0,  8, 14,  0,  9,  0, 13},
//                { 6,  0, 12, 11, 14, 15,  1,  0,  0,  0,  9,  0,  0,  2,  0,  4},
//                { 3,  0,  0,  0, 13,  8,  0, 10, 11,  0, 16, 12,  0,  0,  0,  0},
//                { 0,  0, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0}
//        };
    	
    	//129 -> 01.00 - 00.38 - 00.37
    	//128 -> 24.40 - 07.01 - 01.60
    	//127 -> 10.94 - 11.20 - 10.97
    	//126 -> 31.09 - 30.88 - 37.79
    	//125 -> 30.81 - 62.34 - 31.78
    	
    	//2,6, 15, 74, 339.1
        
//        int[][] sudokuBoard = {
//        		{6, 7, 3, 0, 0, 0, 0, 1, 2},
//                {0, 0, 0, 0, 3, 5, 0, 0, 0},
//                {0, 0, 0, 6, 0, 0, 0, 7, 0},
//                {7, 9, 8, 0, 0, 0, 3, 0, 0},
//                {0, 0, 0, 4, 0, 0, 8, 0, 0},
//                {1, 0, 0, 0, 0, 0, 0, 0, 0},
//                {0, 0, 0, 1, 2, 0, 0, 0, 0},
//                {0, 8, 0, 0, 0, 0, 0, 4, 0},
//                {3, 5, 1, 9, 4, 7, 6, 0, 0}
//        };

        System.out.println("Original Sudoku:");
        printBoard(sudokuBoard);

        
        if (solveSudoku(sudokuBoard)) {
            System.out.println("\nSolved Sudoku:");
            printBoard(sudokuBoard);
        } else {
            System.out.println("No solution exists.");
        }
        double end = System.nanoTime();
        System.out.println((end - start)/1_000_000_000);
    }
}
